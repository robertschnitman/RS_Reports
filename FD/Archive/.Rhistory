table1 <- with(mtcars, main_table(gear, cyl))
library(knitr)
library(tidyverse)
library(magrittr)
link <- 'https://www.github.com/robertschnitman/FD'
main_table <- function(...) {
dots <- list(...)
if (length(dots) != 2) {
stop(paste0('This function assumes two variables. Number of variables detected is ', length(dots), '.'))
}
freq <- table(...)
prop <- prop.table(freq)
freq_df <- as.data.frame(freq) %>%
spread(NCOL(.) - 1, NCOL(.)) %>%
mutate(Total = apply(.[, 2:NCOL(.)], 1, sum)) %>%
map_df(as.character)
prop_df <- freq_df
prop_df[, 2:NCOL(prop_df)] <- prop_df[, 2:NCOL(prop_df)]/prop_df$Total
prop_df[, 2:NCOL(prop_df)] %<>%
map_df(~ paste0(round(.x*100), '%'))
prop_df[, 1] <- ''
# list(freq_df, prop_df)
combine <- map_df(1:NROW(freq_df), ~ rbind(freq_df[.x, ], prop_df[.x, ]))
combine
}
main_knit <- function(mt, caption) {
mt %>%
kable()
}
table1 <- with(mtcars, main_table(gear, cyl))
main_knit(table1)
table1
mytable <- with(mtcars, main_table(gear, cyl))
main_knit(mytable)
main_table <- function(...) {
dots <- list(...)
if (length(dots) != 2) {
stop(paste0('This function assumes two variables. Number of variables detected is ', length(dots), '.'))
}
freq <- table(...)
prop <- prop.table(freq)
freq_df <- as.data.frame(freq) %>%
spread(NCOL(.) - 1, NCOL(.)) %>%
mutate(Total = apply(.[, 2:NCOL(.)], 1, sum)) %>%
map_df(as.character)
prop_df <- freq_df
prop_df[, 2:NCOL(prop_df)] <- prop_df[, 2:NCOL(prop_df)]/prop_df$Total
prop_df[, 2:NCOL(prop_df)] %<>%
map_df(~ paste0(round(as.numeric(.x)*100), '%'))
prop_df[, 1] <- ''
# list(freq_df, prop_df)
combine <- map_df(1:NROW(freq_df), ~ rbind(freq_df[.x, ], prop_df[.x, ]))
combine
}
freq <- with(mtcars, main_table(gear, cyl))
freq <- with(mtcars, table(gear, cyl))
prop <- prop.table(freq)
freq_df <- as.data.frame(freq) %>%
spread(NCOL(.) - 1, NCOL(.)) %>%
mutate(Total = apply(.[, 2:NCOL(.)], 1, sum)) %>%
map_df(as.character)
prop_df <- freq_df
prop_df[, 2:NCOL(prop_df)] <- prop_df[, 2:NCOL(prop_df)]/prop_df$Total
prop_df[, 2:NCOL(prop_df)] %<>%
map_df(~ paste0(round(as.numeric(.x)*100), '%'))
prop_df[, 1] <- ''
# list(freq_df, prop_df)
combine <- map_df(1:NROW(freq_df), ~ rbind(freq_df[.x, ], prop_df[.x, ]))
combine
kable(combine)
with(mtcars, main_table(gear, cyl))
prop_df
freq_df
prop_df <- freq_df
prop_df[, 2:NCOL(prop_df)] <- prop_df[, 2:NCOL(prop_df)]/prop_df$Total
prop_df[, 2:NCOL(prop_df)] %<>%
map_df(~ paste0(round(as.numeric(.x)*100), '%'))
prop_df[, 1] <- ''
prop_df
prop_df <- freq_df
prop_df[, 2:NCOL(prop_df)]/prop_df$Total
main_table <- function(...) {
dots <- list(...)
if (length(dots) != 2) {
stop(paste0('This function assumes two variables. Number of variables detected is ', length(dots), '.'))
}
freq <- table(...)
prop <- prop.table(freq)
freq_df <- as.data.frame(freq) %>%
spread(NCOL(.) - 1, NCOL(.)) %>%
mutate(Total = apply(.[, 2:NCOL(.)], 1, sum)) #%>%
#map_df(as.character)
prop_df <- freq_df
prop_df[, 2:NCOL(prop_df)] <- prop_df[, 2:NCOL(prop_df)]/prop_df$Total
prop_df[, 2:NCOL(prop_df)] %<>%
map_df(~ paste0(round(.x*100), '%'))
prop_df[, 1] <- ''
freq_df %<>% map_df(as.character)
prop_df %<>% map_df(as.character)
# list(freq_df, prop_df)
combine <- map_df(1:NROW(freq_df), ~ rbind(freq_df[.x, ], prop_df[.x, ]))
combine
}
main_knit <- function(mt, caption) {
mt %>%
kable()
}
with(mtcars, main_table(gear, cyl))
main_knit(mytable)
mytable <- with(mtcars, main_table(gear, cyl))
main_knit(mytable)
library(kableExtra)
Orange
?datasets
iris
library(help = "datasets")
BJsales
ChickWeight
str(ChickWeight)
str(HairEyeColor)
with(HairEyeColor, main_table(Hair, Eye))
HairEyeColor
HairEyeColor %>% as.data.frame()
library(help = "datasets")
str(diamonds)
?column_spec
str(ggplot2::diamonds)
purrr::map_dbl(ggplot2::diamonds, ~ length(unique(.x))
)
args(knitr::kable)
link <- 'https://github.com/robertschnitman/RS_Reports/blob/master/FD/FD.rmd'
# install.packages('tinytex')
# tinytex::install_tinytex()
library(knitr)
library(kableExtra)
suppressMessages(library(tidyverse))
suppressMessages(library(magrittr))
main_table <- function(...) {
### Check if the number of variables is not 2.
##  For now, cross-tabs between two variables is only possible at this point.
dots <- list(...)
if (length(dots) != 2) {
stop(paste0('This function assumes two variables. Number of variables detected is ',
length(dots),
'.'))
}
### Generate the counts.
freq <- table(...)
freq_df <- as.data.frame(freq) %>%
spread(NCOL(.) - 1, NCOL(.)) %>%
mutate(Total = apply(.[, 2:NCOL(.)], 1, sum),
Mean  = apply(.[, 2:NCOL(.)], 1, function(x) sum(x*1:5)/sum(x)))
### Generate the ROWWISE percentages.
prop_df <- freq_df
prop_df[, 2:NCOL(prop_df)] <- prop_df[, 2:NCOL(prop_df)]/prop_df$Total
prop_df[, 2:NCOL(prop_df)] %<>%
map_df(~ paste0(round(.x*100), '%'))
### Convert freq_df and prop_df into characters so that
##  we can combine them into the same data frame.
freq_df %<>% # Format the counts so that they are of the NNN,NNN format.
format(., big.mark = ',', scientific = FALSE) %>%
map_df(as.character)
prop_df %<>% map_df(as.character)
### Combine freq_df and prop_df
combine <- map_df(1:NROW(freq_df), ~ rbind(freq_df[.x, ], prop_df[.x, ]))
combine
}
with(diamonds, main_table(color, cut))
(163+2*662+1513*3+1603*4+2834*5)/6775
link <- 'https://github.com/robertschnitman/RS_Reports/blob/master/FD/FD.rmd'
# install.packages('tinytex')
# tinytex::install_tinytex()
library(knitr)
library(kableExtra)
suppressMessages(library(tidyverse))
suppressMessages(library(magrittr))
main_table <- function(...) {
### Check if the number of variables is not 2.
##  For now, cross-tabs between two variables is only possible at this point.
dots <- list(...)
if (length(dots) != 2) {
stop(paste0('This function assumes two variables. Number of variables detected is ',
length(dots),
'.'))
}
### Generate the counts.
freq <- table(...)
freq_df <- as.data.frame(freq) %>%
spread(NCOL(.) - 1, NCOL(.)) %>%
mutate(Total = apply(.[, 2:NCOL(.)], 1, sum),
Mean  = apply(.[, 2:NCOL(.)], 1, function(x) round(sum(x*1:5)/sum(x))), 2)
### Generate the ROWWISE percentages.
prop_df <- freq_df
prop_df[, 2:NCOL(prop_df)] <- prop_df[, 2:NCOL(prop_df)]/prop_df$Total
prop_df[, 2:NCOL(prop_df)] %<>%
map_df(~ paste0(round(.x*100), '%'))
### Convert freq_df and prop_df into characters so that
##  we can combine them into the same data frame.
freq_df %<>% # Format the counts so that they are of the NNN,NNN format.
format(., big.mark = ',', scientific = FALSE) %>%
map_df(as.character)
prop_df %<>% map_df(as.character)
### Combine freq_df and prop_df
combine <- map_df(1:NROW(freq_df), ~ rbind(freq_df[.x, ], prop_df[.x, ]))
combine
}
main_knit <- function(mt, caption, col.names = NA) {
mt %>%
kable('latex',
booktabs = TRUE,
caption = caption,
linesep = '',
col.names = col.names) %>%
kable_styling(full_width = TRUE) %>%
collapse_rows(1, valign = "top", latex_hline = "major")
}
names_clarity <- c('Color',
'1 = Fair',
'2 = Good',
'3 = Very Good',
'4 = Premium',
'5 = Ideal',
'Total',
'Mean Quality Level')
clarities <- unique(diamonds$clarity)
for (i in 1:length(clarities)) {
ss <- subset(diamonds, clarity == clarities[i])
mt <- with(diamonds, main_table(color, cut))
main_knit(mt, paste0('clarity: ', clarities[i]), col.names = names_clarity) %>%
print()
#cat('\\newpage')
}
with(diamonds, main_table(color, cut))
main_table <- function(...) {
### Check if the number of variables is not 2.
##  For now, cross-tabs between two variables is only possible at this point.
dots <- list(...)
if (length(dots) != 2) {
stop(paste0('This function assumes two variables. Number of variables detected is ',
length(dots),
'.'))
}
### Generate the counts.
freq <- table(...)
freq_df <- as.data.frame(freq) %>%
spread(NCOL(.) - 1, NCOL(.)) %>%
mutate(Total = apply(.[, 2:NCOL(.)], 1, sum),
Mean  = apply(.[, 2:NCOL(.)], 1, function(x) round(sum(x*1:5)/sum(x))), 2)
### Generate the ROWWISE percentages.
prop_df <- freq_df
prop_df[, 2:NCOL(prop_df)] <- prop_df[, 2:NCOL(prop_df)]/prop_df$Total
prop_df[, 2:NCOL(prop_df)] %<>%
map_df(~ paste0(round(.x*100), '%'))
### Convert freq_df and prop_df into characters so that
##  we can combine them into the same data frame.
freq_df %<>% # Format the counts so that they are of the NNN,NNN format.
format(., big.mark = ',', scientific = FALSE) %>%
map_df(as.character)
prop_df %<>% map_df(as.character)
### Combine freq_df and prop_df
combine <- map_df(1:NROW(freq_df), ~ rbind(freq_df[.x, ], prop_df[.x, ]))
combine
}
with(diamonds, main_table(color, cut))
with(diamonds, table(color, cut)) -> freq
freq_df <- as.data.frame(freq) %>%
spread(NCOL(.) - 1, NCOL(.)) %>%
mutate(Total = apply(.[, 2:NCOL(.)], 1, sum),
Mean  = apply(.[, 2:NCOL(.)], 1, function(x) round(sum(x*1:5)/sum(x))), 2)
### Generate the ROWWISE percentages.
prop_df <- freq_df
prop_df[, 2:NCOL(prop_df)] <- prop_df[, 2:NCOL(prop_df)]/prop_df$Total
prop_df[, 2:NCOL(prop_df)] %<>%
map_df(~ paste0(round(.x*100), '%'))
### Convert freq_df and prop_df into characters so that
##  we can combine them into the same data frame.
freq_df %<>% # Format the counts so that they are of the NNN,NNN format.
format(., big.mark = ',', scientific = FALSE) %>%
map_df(as.character)
prop_df %<>% map_df(as.character)
### Combine freq_df and prop_df
combine <- map_df(1:NROW(freq_df), ~ rbind(freq_df[.x, ], prop_df[.x, ]))
combine
prop_fd
prop_df
freq_df
str(diamonds)
