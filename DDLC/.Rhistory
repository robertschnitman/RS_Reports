geom_smooth(method = 'lm', se = FALSE, col = 'salmon') +
labs(x       = 'Fitted Values',
title   = 'Fig. 6 - Log Residuals vs. Fitted Values',
caption = 'Note: Salmon-colored line indicates the linear smoothed fit between
the residuals and fitted values.') +
theme_light2()
# Name libraries to use for analysis.
libs <- c('tidyverse', 'magrittr', 'knitr', 'kableExtra', 'broom', 'gridExtra')
# Write function for loading libraries or installing them if not available.
try_load <- function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x)
library(x, character.only = TRUE)
}
}
# Load libraries
Map(try_load, libs)
g1 <- ggplot(data) +
aes(y = Natsuki, x = Sayori) +
geom_jitter(col = 'salmon') +
theme_light2()
g1
set.seed(1) # Remember state.
g1 <- ggplot(data) +
aes(y = Natsuki, x = Sayori) +
geom_jitter(col = 'salmon') +
theme_light2()
g2 <- ggplot(data) +
aes(y = Natsuki, x = Yuri) +
geom_jitter(col = 'cyan4') +
theme_light2()
g3 <- ggplot(data) +
aes(y = Sayori, x = Yuri) +
geom_jitter(col = 'forestgreen4') +
theme_light2()
grid.arrange(g1, g2, g3, nrow = 2, ncol = 2)
set.seed(1) # Remember state.
g1 <- ggplot(data) +
aes(y = Natsuki, x = Sayori) +
geom_jitter(col = 'salmon') +
theme_light2()
g2 <- ggplot(data) +
aes(y = Natsuki, x = Yuri) +
geom_jitter(col = 'cyan4') +
theme_light2()
g3 <- ggplot(data) +
aes(y = Sayori, x = Yuri) +
geom_jitter(col = 'forestgreen') +
theme_light2()
grid.arrange(g1, g2, g3, nrow = 2, ncol = 2)
args(grid.arrange)
k
hist(resid(k))
k <- lm(log(Value) ~ factor(Character), data2)
hist(resid(k))
ggplot(fitres) +
aes(y = res1, x = fit1) +
geom_jitter(col = 'cyan4') +
geom_hline(yintercept = 0, lty = 2) +
geom_smooth(method = 'lm', se = FALSE, col = 'salmon') +
labs(x       = 'Fitted Values',
y       = 'Residuals',
title   = 'Fig. 5 - Residuals vs. Fitted Values',
caption = 'Note: Salmon-colored line indicates the linear smoothed fit between
the residuals and fitted values.') +
theme_light2()
ggplot(fitres) +
aes(y = res2, x = fit2) +
geom_jitter(col = 'cyan4') +
geom_hline(yintercept = 0, lty = 2) +
geom_smooth(method = 'lm', se = FALSE, col = 'salmon') +
labs(x       = 'Log Fitted Values',
y       = 'Log Residuals',
title   = 'Fig. 6 - Log Residuals vs. Fitted Values',
caption = 'Note: Salmon-colored line indicates the linear smoothed fit between
the residuals and fitted values.') +
theme_light2()
ggplot(fitres) +
aes(y = res1, x = fit1) +
geom_jitter(col = 'cyan4') +
geom_hline(yintercept = 0, lty = 2) +
geom_smooth(method = 'lm', se = FALSE, col = 'salmon') +
labs(x       = 'Fitted Values',
y       = 'Residuals',
title   = 'Fig. 5 - Residuals vs. Fitted Values',
caption = 'Note: Salmon-colored line indicates the linear smoothed fit between
the residuals and fitted values.') +
theme_light2()
ggplot(fitres) +
aes(y = res2, x = fit2) +
geom_jitter(col = 'cyan4') +
geom_hline(yintercept = 0, lty = 2) +
geom_smooth(method = 'lm', se = FALSE, col = 'salmon') +
labs(x       = 'Log Fitted Values',
y       = 'Log Residuals',
title   = 'Fig. 6 - Log Residuals vs. Fitted Values',
caption = 'Note: Salmon-colored line indicates the linear smoothed fit between
the residuals and fitted values.') +
theme_light2()
ggplot(fitres) +
aes(x = res1) +
geom_histogram(bins = 15, fill = 'cyan4', col = 'gray', alpha = 0.8) +
labs(y = 'Frequency',
x = 'Residuals',
title = 'Fig. 3 - Residuals Distribution') +
theme_light2()
ggplot(fitres) +
aes(x = res2) +
geom_histogram(bins = 15, fill = 'cyan4', col = 'gray', alpha = 0.8) +
labs(y = 'Frequency',
x = 'Log Residuals',
title = 'Fig. 4 - Log Residuals Distribution') +
theme_light2()
fr1 <- ggplot(fitres) +
aes(x = res1) +
geom_histogram(bins = 15, fill = 'cyan4', col = 'gray', alpha = 0.8) +
labs(y = 'Frequency',
x = 'Residuals',
title = 'Fig. 3 - Residuals Distribution') +
theme_light2()
fr2 <- ggplot(fitres) +
aes(x = res2) +
geom_histogram(bins = 15, fill = 'cyan4', col = 'gray', alpha = 0.8) +
labs(y = 'Frequency',
x = 'Log Residuals',
title = 'Fig. 4 - Log Residuals Distribution') +
theme_light2()
grid.arrange(fr1, fr2, nrow = 1, ncol = 2)
fr3 <- ggplot(fitres) +
aes(y = res1, x = fit1) +
geom_jitter(col = 'cyan4') +
geom_hline(yintercept = 0, lty = 2) +
geom_smooth(method = 'lm', se = FALSE, col = 'salmon') +
labs(x       = 'Fitted Values',
y       = 'Residuals',
title   = 'Fig. 5 - Residuals vs. Fitted Values',
caption = 'Note: Salmon-colored line indicates the linear smoothed fit between
the residuals and fitted values.') +
theme_light2()
fr4 <- ggplot(fitres) +
aes(y = res2, x = fit2) +
geom_jitter(col = 'cyan4') +
geom_hline(yintercept = 0, lty = 2) +
geom_smooth(method = 'lm', se = FALSE, col = 'salmon') +
labs(x       = 'Log Fitted Values',
y       = 'Log Residuals',
title   = 'Fig. 6 - Log Residuals vs. Fitted Values',
caption = 'Note: Salmon-colored line indicates the linear smoothed fit between
the residuals and fitted values.') +
theme_light2()
grid.arrange(fr3, fr4, nrow = 1, ncol = 2)
set.seed(1) # Remember state.
fr3 <- ggplot(fitres) +
aes(y = res1, x = fit1) +
geom_jitter(col = 'cyan4', alpha = 0.8) +
geom_hline(yintercept = 0, lty = 2) +
geom_smooth(method = 'lm', se = FALSE, col = 'salmon') +
labs(x       = 'Fitted Values',
y       = 'Residuals',
title   = 'Fig. 5 - Residuals vs. Fitted Values',
caption = 'Note: Salmon-colored line indicates the linear smoothed fit between
the residuals and fitted values.') +
theme_light2()
fr4 <- ggplot(fitres) +
aes(y = res2, x = fit2) +
geom_jitter(col = 'cyan4', alpha = 0.8) +
geom_hline(yintercept = 0, lty = 2) +
geom_smooth(method = 'lm', se = FALSE, col = 'salmon') +
labs(x       = 'Log Fitted Values',
y       = 'Log Residuals',
title   = 'Fig. 6 - Log Residuals vs. Fitted Values',
caption = 'Note: Salmon-colored line indicates the linear smoothed fit between
the residuals and fitted values.') +
theme_light2()
grid.arrange(fr3, fr4, nrow = 1, ncol = 2)
set.seed(1) # Remember state.
fr3 <- ggplot(fitres) +
aes(y = res1, x = fit1) +
geom_jitter(col = 'cyan4', alpha = 0.6) +
geom_hline(yintercept = 0, lty = 2) +
geom_smooth(method = 'lm', se = FALSE, col = 'salmon') +
labs(x       = 'Fitted Values',
y       = 'Residuals',
title   = 'Fig. 5 - Residuals vs. Fitted Values',
caption = 'Note: Salmon-colored line indicates the linear smoothed fit between
the residuals and fitted values.') +
theme_light2()
fr4 <- ggplot(fitres) +
aes(y = res2, x = fit2) +
geom_jitter(col = 'cyan4', alpha = 0.8) +
geom_hline(yintercept = 0, lty = 2) +
geom_smooth(method = 'lm', se = FALSE, col = 'salmon') +
labs(x       = 'Log Fitted Values',
y       = 'Log Residuals',
title   = 'Fig. 6 - Log Residuals vs. Fitted Values',
caption = 'Note: Salmon-colored line indicates the linear smoothed fit between
the residuals and fitted values.') +
theme_light2()
grid.arrange(fr3, fr4, nrow = 1, ncol = 2)
set.seed(1) # Remember state.
fr3 <- ggplot(fitres) +
aes(y = res1, x = fit1) +
geom_jitter(col = 'cyan4', alpha = 0.6) +
geom_hline(yintercept = 0, lty = 2) +
geom_smooth(method = 'lm', se = FALSE, col = 'salmon') +
labs(x       = 'Fitted Values',
y       = 'Residuals',
title   = 'Fig. 5 - Residuals vs. Fitted Values',
caption = 'Note: Salmon-colored line indicates the linear smoothed fit between
the residuals and fitted values.') +
theme_light2()
fr4 <- ggplot(fitres) +
aes(y = res2, x = fit2) +
geom_jitter(col = 'cyan4', alpha = 0.8, pch = 1) +
geom_hline(yintercept = 0, lty = 2) +
geom_smooth(method = 'lm', se = FALSE, col = 'salmon') +
labs(x       = 'Log Fitted Values',
y       = 'Log Residuals',
title   = 'Fig. 6 - Log Residuals vs. Fitted Values',
caption = 'Note: Salmon-colored line indicates the linear smoothed fit between
the residuals and fitted values.') +
theme_light2()
grid.arrange(fr3, fr4, nrow = 1, ncol = 2)
set.seed(1) # Remember state.
fr3 <- ggplot(fitres) +
aes(y = res1, x = fit1) +
geom_jitter(col = 'cyan4', alpha = 0.3) +
geom_hline(yintercept = 0, lty = 2) +
geom_smooth(method = 'lm', se = FALSE, col = 'salmon') +
labs(x       = 'Fitted Values',
y       = 'Residuals',
title   = 'Fig. 5 - Residuals vs. Fitted Values',
caption = 'Note: Salmon-colored line indicates the linear smoothed fit between
the residuals and fitted values.') +
theme_light2()
fr4 <- ggplot(fitres) +
aes(y = res2, x = fit2) +
geom_jitter(col = 'cyan4', alpha = 0.8) +
geom_hline(yintercept = 0, lty = 2) +
geom_smooth(method = 'lm', se = FALSE, col = 'salmon') +
labs(x       = 'Log Fitted Values',
y       = 'Log Residuals',
title   = 'Fig. 6 - Log Residuals vs. Fitted Values',
caption = 'Note: Salmon-colored line indicates the linear smoothed fit between
the residuals and fitted values.') +
theme_light2()
grid.arrange(fr3, fr4, nrow = 1, ncol = 2)
set.seed(1) # Remember state.
fr3 <- ggplot(fitres) +
aes(y = res1, x = fit1) +
geom_jitter(col = 'cyan4') +
geom_hline(yintercept = 0, lty = 2) +
geom_smooth(method = 'lm', se = FALSE, col = 'salmon') +
labs(x       = 'Fitted Values',
y       = 'Residuals',
title   = 'Fig. 5 - Residuals vs. Fitted Values',
caption = 'Note: Salmon-colored line indicates the linear smoothed fit between
the residuals and fitted values.') +
theme_light2()
fr4 <- ggplot(fitres) +
aes(y = res2, x = fit2) +
geom_jitter(col = 'cyan4', alpha = 0.8) +
geom_hline(yintercept = 0, lty = 2) +
geom_smooth(method = 'lm', se = FALSE, col = 'salmon') +
labs(x       = 'Log Fitted Values',
y       = 'Log Residuals',
title   = 'Fig. 6 - Log Residuals vs. Fitted Values',
caption = 'Note: Salmon-colored line indicates the linear smoothed fit between
the residuals and fitted values.') +
theme_light2()
grid.arrange(fr3, fr4, nrow = 1, ncol = 2)
kruskal.test(Value ~ Character, data2)
kruskal.test(Value ~ Character, data2) %>% TukeyHSD()
install.packages("FSA")
FSA::dunnTest(Value ~ Character, data2, method = 'bh')
# Name libraries to use for analysis.
libs <- c('tidyverse',  # For data management.
'magrittr',   # For data management.
'knitr',      # For presenting tables.
'kableExtra', # For presenting tables.
'broom',      # For tidying models/tests.
'gridExtra',  # For placing plots on a grid.
'FSA')        # For Dunn's Test
# Write function for loading libraries or installing them if not available.
try_load <- function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x)
library(x, character.only = TRUE)
}
}
# Load libraries
Map(try_load, libs)
kw <- kruskal.test(Value ~ Character, data2)
kw
kw %>% tidy()
dt <- tidy(dunnTest(Value ~ Character, data2, method = 'bh'))
dt <- dunnTest(Value ~ Character, data2, method = 'bh')
dt$method
dt$res
dt$dtres
dt$res %>% as.data.frame()
# Name libraries to use for analysis.
libs <- c('tidyverse',  # For data management.
'magrittr',   # For data management.
'knitr',      # For presenting tables.
'kableExtra', # For presenting tables.
'broom',      # For tidying models/tests.
'gridExtra',  # For placing plots on a grid.
'FSA')        # For Dunn's Test
# Write function for loading libraries or installing them if not available.
try_load <- function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x)
library(x, character.only = TRUE)
}
}
# Load libraries
Map(try_load, libs)
# Import Dataset
## Saved data from the following link into a CSV: https://ddlcwiki.net/wiki/Poem_game)
data <- read.csv('ddlc.csv', stringsAsFactors = FALSE)
# Show the first few rows of the dataset
kable(head(data, 5),
booktabs = TRUE,
caption = 'DDLC Points Distribution Data (First Five Rows)') %>%
kable_styling(full_width = TRUE, latex_options = "hold_position") %>%
footnote(general = 'https://ddlcwiki.net/wiki/Poem_game',
general_title = 'Data Source:',
footnote_as_chunk = TRUE)
# Pivot the dataset.
data2 <- gather(data, 'Character', 'Value', 2:4)
# Create a function that sets up the background of the plot.
theme_light2 <- function() {
theme_light() +
theme(panel.grid.minor   = element_blank(),
panel.grid.major.x = element_blank())
}
# Generate the plot.
ggplot(data2) +
aes(x = Value, fill = Character) +
geom_histogram(bins = 3, col = 'gray', alpha = 0.8) +
facet_wrap(~ Character) +
guides(fill = FALSE) +
labs(x     = 'Points',
y     = 'Frequency',
title = 'Fig. 1 - Points Distribution in the DDLC Poem Minigame') +
scale_x_continuous(breaks = 1:3) +
theme_light2()
# Calculate the mean and SDs of the points for each character.
msd <- aggregate(Value ~ Character,
data2,
function(x) c(Mean = round(mean(x), 3), SD = round(sd(x), 3))) %>%
do.call(data.frame, .) %>%
rbind(data.frame(Character = 'Overall',
Mean      = mean(data2$Value),
SD        = sd(data2$Value)))
# Calculate the mean and SDs of the points for each character.
msd <- aggregate(Value ~ Character,
data2,
function(x) c(Mean = round(mean(x), 3), SD = round(sd(x), 3))) %>%
do.call(data.frame, .) %>%
rbind(., data.frame(Character = 'Overall',
Mean      = mean(data2$Value),
SD        = sd(data2$Value)))
# Calculate the mean and SDs of the points for each character.
msd <- aggregate(Value ~ Character,
data2,
function(x) c(Mean = round(mean(x), 3), SD = round(sd(x), 3))) %>%
do.call(data.frame, .)
# Rename the columns.
names(msd) <- c('Character', 'Mean', 'SD')
msd %<>%
rbind(data.frame(Character = 'Overall',
Mean      = mean(data2$Value),
SD        = sd(data2$Value)))
# Show the means and standard deviations.
kable(msd, booktabs = TRUE, caption = 'Central Tendency of the Points') %>%
kable_styling(full_width = TRUE, latex_options = "hold_position")
# Calculate the mean and SDs of the points for each character.
msd <- aggregate(Value ~ Character,
data2,
function(x) c(Mean = round(mean(x), 3), SD = round(sd(x), 3))) %>%
do.call(data.frame, .)
# Rename the columns.
names(msd) <- c('Character', 'Mean', 'SD')
msd %<>%
rbind(data.frame(Character = 'Overall',
Mean      = round(mean(data2$Value), 3),
SD        = round(sd(data2$Value), 3))
# Show the means and standard deviations.
kable(msd, booktabs = TRUE, caption = 'Central Tendency of the Points') %>%
# Calculate the mean and SDs of the points for each character.
msd <- aggregate(Value ~ Character,
data2,
function(x) c(Mean = round(mean(x), 3), SD = round(sd(x), 3))) %>%
do.call(data.frame, .)
# Rename the columns.
names(msd) <- c('Character', 'Mean', 'SD')
msd %<>%
rbind(data.frame(Character = 'Overall',
Mean      = round(mean(data2$Value), 3),
SD        = round(sd(data2$Value), 3)))
# Show the means and standard deviations.
kable(msd, booktabs = TRUE, caption = 'Central Tendency of the Points') %>%
kable_styling(full_width = TRUE, latex_options = "hold_position")
install.packages("kknn")
?kknn::cv.kknn
?kknn
?kknn::kknn
?kmeans
View(data)
?fig.keep
?fig_chunk
?kruskal.test
?FSA::dunnTest
# Name libraries to use for analysis.
libs <- c('tidyverse',  # For data management.
'magrittr',   # For data management.
'knitr',      # For presenting tables.
'kableExtra', # For presenting tables.
'broom',      # For tidying models/tests.
'gridExtra',  # For placing plots on a grid.
'FSA')        # For Dunn's Test
# Write function for loading libraries or installing them if not available.
try_load <- function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x)
library(x, character.only = TRUE)
}
}
# Load libraries
Map(try_load, libs)
# Import Dataset
## Saved data from the following link into a CSV: https://ddlcwiki.net/wiki/Poem_game)
data <- read.csv('ddlc.csv', stringsAsFactors = FALSE)
# Show the first few rows of the dataset
kable(head(data, 5),
booktabs = TRUE,
caption = 'DDLC Points Distribution Data (First Five Rows)') %>%
kable_styling(full_width = TRUE, latex_options = "hold_position") %>%
footnote(general = 'https://ddlcwiki.net/wiki/Poem_game',
general_title = 'Data Source:',
footnote_as_chunk = TRUE)
# Pivot the dataset.
data2 <- gather(data, 'Character', 'Value', 2:4)
# Create a function that sets up the background of the plot.
theme_light2 <- function() {
theme_light() +
theme(panel.grid.minor   = element_blank(),
panel.grid.major.x = element_blank())
}
# Generate the plot.
ggplot(data2) +
aes(x = Value, fill = Character) +
geom_histogram(bins = 3, col = 'gray', alpha = 0.8) +
facet_wrap(~ Character) +
guides(fill = FALSE) +
labs(x     = 'Points',
y     = 'Frequency',
title = 'Fig. 1 - Points Distribution in the DDLC Poem Minigame') +
scale_x_continuous(breaks = 1:3) +
theme_light2()
# Generate a plot of means and SDs.
ggplot(msd) +
aes(x = Character, y = Mean, fill = Character) +
geom_bar(stat = 'identity', alpha = 0.8) +
geom_errorbar(ymin = msd$Mean - msd$SD,
ymax = msd$Mean + msd$SD,
alpha = 0.8) +
geom_hline(yintercept = mean(msd$Mean), lty = 2) +
ylim(0, 3) +
labs(x = '',
title = 'Fig. 2 - Central Tendency of the Poem Minigame\'s
Points Distribution by DDLC Character',
caption = 'Note: The error bars (i.e. the "I" geometries)
indicate the standard deviation of a specific character\'s distribution,
centered at a character\'s average number of points across the words.
Dashed line indicates the grand mean across the characters.') +
guides(fill = FALSE) +
theme_light2()
# Calculate the mean and SDs of the points for each character.
msd <- aggregate(Value ~ Character,
data2,
function(x) c(Mean = round(mean(x), 3), SD = round(sd(x), 3))) %>%
do.call(data.frame, .)
# Rename the columns.
names(msd) <- c('Character', 'Mean', 'SD')
msd %<>%
rbind(data.frame(Character = 'Overall',
Mean      = round(mean(data2$Value), 3),
SD        = round(sd(data2$Value), 3)))
# Show the means and standard deviations.
kable(msd, booktabs = TRUE, caption = 'Central Tendency of the Points') %>%
kable_styling(full_width = TRUE, latex_options = "hold_position")
# Generate a plot of means and SDs.
ggplot(msd) +
aes(x = Character, y = Mean, fill = Character) +
geom_bar(stat = 'identity', alpha = 0.8) +
geom_errorbar(ymin = msd$Mean - msd$SD,
ymax = msd$Mean + msd$SD,
alpha = 0.8) +
geom_hline(yintercept = mean(msd$Mean), lty = 2) +
ylim(0, 3) +
labs(x = '',
title = 'Fig. 2 - Central Tendency of the Poem Minigame\'s
Points Distribution by DDLC Character',
caption = 'Note: The error bars (i.e. the "I" geometries)
indicate the standard deviation of a specific character\'s distribution,
centered at a character\'s average number of points across the words.
Dashed line indicates the grand mean across the characters.') +
guides(fill = FALSE) +
theme_light2()
