presidents
install.packages("forecast")
do.call(cbind, presidents)
do.call(cbind, as.list(presidents))
str(presidents)
as.matrix(presidents)
?datasets
library(help = 'datasets')
as.matrix(presidents, length(presidents), 4)
matrix(presidents, length(presidents), 4)
str(presidents)
data(presidents) # President approval ratings
presidents_matrix <- matrix(presidents, length(presidents), 4)
colnames(presidents_matrix) <- paste0('Q', 1:4)
rownames(presidents_matrix <- 1945:1975)
rownames(presidents_matrix) <- 1945:1975
presidents_matrix <- matrix(presidents, length(presidents), 4)
colnames(presidents_matrix) <- paste0('Q', 1:4)
rownames(presidents_matrix) <- 1945:1975
View(presidents)
str(presidents)
str(presidents_matrix)
head(presidents)
View(presidents)
presidents
?head
?presidents
forecast(presidents, h = 1)$mean
suppressMessages(lapply(c('tidyverse', 'magrittr', 'knitr', 'kableExtra', 'forecast'),
function(x) library(x, character.only = TRUE)))
presidents # President approval ratings 1945-1974
forecast(presidents, h = 1)$mean
forecast(presidents, h = 2)$mean
forecast(presidents, h = 4)$mean
forecast(presidents, h = 2)$mean
forecast(presidents, h = 10)$mean
forecast(presidents, h = 10)$fitted
forecast(presidents, h = 1)$fitted
forecast(presidents, h = 1)$fitted == forecast(presidents, h = 10)$fitted
forecast(presidents)
k <- forecast(presidents)
str(k)
indices_na <- which(is.na(presidents))
indices_na
presidents_imputed <- presidents[indices_na] <- fit[indices_na]
fit <- forecast(presidents, h = 1)$fitted
indices_na <- which(is.na(presidents))
presidents_imputed <- presidents[indices_na] <- fit[indices_na]
presidents
fit
fit
plot(presidents)
?library(help = 'datasets')
library(help = 'datasets')
?EuStockMarkets
EuStockMarkets
USPersonalExpenditure
AirPassengers
plot(AirPassengers)
plot(BJsales)
BJsales
AirPassengers
?AirPassengers
forecast(AirPassengers, h = 1)$mean
fcasts <- forecast(AirPassengers, h = 24)$mean # Forecasting 24 months
matrix(fcasts, 24, 12)
fcasts <- forecast(AirPassengers, h = 24)$mean # Forecasting 24 months
fcasts_matrix           <- matrix(fcasts, 2, 12)
colnames(fcasts_matrix) <- month.abb
rownames(fcasts_matrix) <- 1961:1962
fcasts <- forecast(AirPassengers, h = 24)$mean # Forecasting 24 months
fcasts_matrix           <- matrix(fcasts, 2, 12)
colnames(fcasts_matrix) <- month.abb
rownames(fcasts_matrix) <- 1961:1962
fcasts_matrix
fcasts_matrix           <- matrix(fcasts, 10, 12)
colnames(fcasts_matrix) <- month.abb
fcasts_matrix
rownames(fcasts_matrix) <- 1961:1970
args(rnorm)
sample(rep(1000, 10)*rnorm(10))
sample(rep(1000, 10)*rnorm(10). 3)
sample(rep(1000, 10)*rnorm(10), 3)
##### === SET UP === #####
set.seed(1)
#### SET WORKING DIRECTORY ####
setwd("~/MEGA/Personal/Money/")
#### READ DATA ####
for (i in c('income', 'expenses', 'investments')) {
assign(paste(substr(i, 1, 3), 'df', sep = '.'),
subset(read_excel(myfile, sheet = i), year == yr))
}
##### === EDIT PARAMETERS AS NECESSARY === #####
#### SET YEAR AND FILE NAME####
yr <- 2019
myfile <- 'transactions4.xls'
#### SET INCOME & EXPENSE GOALS
plan_inc <- 36000/12 # Monthly livable income goal
plan_exp <- (plan_inc/3) # Ideal expenses allocation.
#### LOAD LIBRARIES ####
#libs <- c('readxl', 'tidyr', 'knitr', 'ggplot2', 'kableExtra', 'lattice')
libs <- c('readxl', 'tidyverse', 'knitr',
'kableExtra', 'lattice', 'grid',
'gridExtra', 'magrittr')
lapply(libs, library, character.only = TRUE)
# SciencesPo was depcrecated...
##### === SET UP === #####
set.seed(1)
#### SET WORKING DIRECTORY ####
setwd("~/MEGA/Personal/Money/")
#### READ DATA ####
for (i in c('income', 'expenses', 'investments')) {
assign(paste(substr(i, 1, 3), 'df', sep = '.'),
subset(read_excel(myfile, sheet = i), year == yr))
}
income.df %<>% map_df(~ .x*rnorm(length(.x)))
##### === SET UP === #####
set.seed(1)
#### SET WORKING DIRECTORY ####
setwd("~/MEGA/Personal/Money/")
#### READ DATA ####
for (i in c('income', 'expenses', 'investments')) {
assign(paste(substr(i, 1, 3), 'df', sep = '.'),
subset(read_excel(myfile, sheet = i), year == yr))
}
inc.df %<>% map_df(~ .x*rnorm(length(.x)))
str(inc.df)
inc.df[, 16:21)] %<>% map_df(~ .x*rnorm(length(.x)))
inc.df[, 16:21] %<>% map_df(~ .x*rnorm(length(.x)))
str(inc.df)
str(exp.df)
str(inc.df)
str(inv.df)
str(bal)
##### === SET UP === #####
set.seed(1)
#### SET WORKING DIRECTORY ####
setwd("~/MEGA/Personal/Money/")
#### READ DATA ####
for (i in c('income', 'expenses', 'investments')) {
assign(paste(substr(i, 1, 3), 'df', sep = '.'),
subset(read_excel(myfile, sheet = i), year == yr))
}
inc.df[, 16:21] %<>% map_df(~ .x*rnorm(length(.x)))
exp.df[, 9:15] %<>% map_df(~ .x*rnorm(length(.x)))
inv.df[, 8] %<>% map_df(~ .x*rnorm(length(.x)))
bal <- read.csv('~/MEGA/Personal/Money/balances.csv', stringsAsFactors = FALSE) # Why won't it work without the direct file path? The other imports worked fine?
bal2 <- transform(bal,
Year             = substr(date, 1, 4),              # Need to subset Balances data based on the Year.
Month            = as.numeric(substr(date, 6, 7)),  # Need to get the most recent record for a particular month.
Day              = as.numeric(substr(date, 9, 10)), # Just in case.
stringsAsFactors = FALSE)
bal3 <- subset(bal2, Year == yr)
accts <- lapply(unique(bal3$acct), function(x) subset(bal3, acct == x)) # Split accounts into their own datasets.
accts2 <- lapply(accts, function(x) { # Get the last record for each month to know the end-of-month balance.
ss <- lapply(unique(x$Month), function(y) {
step1 <- subset(x, Month == y)
step1[NROW(step1), ]
})
ss
})
bal
str(bal)
##### === SET UP === #####
set.seed(1)
#### SET WORKING DIRECTORY ####
setwd("~/MEGA/Personal/Money/")
#### READ DATA ####
for (i in c('income', 'expenses', 'investments')) {
assign(paste(substr(i, 1, 3), 'df', sep = '.'),
subset(read_excel(myfile, sheet = i), year == yr))
}
map_rand <- function(x) map_df(x, ~ .x*rnorm(length(.x)))
inc.df[, 16:21] %<>% map_rand()
exp.df[, 9:15] %<>% map_rand()
inv.df[, 8] %<>% map_rand()
bal <- read.csv('~/MEGA/Personal/Money/balances.csv', stringsAsFactors = FALSE) # Why won't it work without the direct file path? The other imports worked fine?
bal[, 3:NCOL(bal)] %<>% map_rand()
bal2 <- transform(bal,
Year             = substr(date, 1, 4),              # Need to subset Balances data based on the Year.
Month            = as.numeric(substr(date, 6, 7)),  # Need to get the most recent record for a particular month.
Day              = as.numeric(substr(date, 9, 10)), # Just in case.
stringsAsFactors = FALSE,
Savings          = bal_savavail)
bal2[, c('bal_savavail', 'bal_savcurr')] <- NULL
str(bal2)
total_accts <- aggregate(bal2[, grep('^bal', names(bal2))] ~ Month, bal2, sum, na.rm = TRUE)
bal2[, grep('^bal', names(bal2))]
total_accts <- bal2 %>%
select(grep('Month|^bal|Savings', names(bal2))) %>%
group_by(month) %>%
summarise_all(sum, na.rm = TRUE)
total_accts <- bal2 %>%
select(grep('Month|^bal|Savings', names(bal2))) %>%
group_by(Month) %>%
summarise_all(sum, na.rm = TRUE)
total_accts
bal2 %>%
select(grep('Month|^bal|Savings', names(bal2))) %>%
group_by(Month) %>%
summarise_all(sum, na.rm = TRUE) %>%
mutate(`Net Assets` = bal_chk + bal_ira_bal_bro + bal_403b - bal_cr) %>%
mutate(Change = `Net Assets` - lag(`Net Assets`)) %>%
mutate(Change_Pct = Change/lag(`NetAssets))
bal2 %>%
select(grep('Month|^bal|Savings', names(bal2))) %>%
group_by(Month) %>%
summarise_all(sum, na.rm = TRUE) %>%
mutate(`Net Assets` = bal_chk + bal_ira_bal_bro + bal_403b - bal_cr) %>%
mutate(Change = `Net Assets` - lag(`Net Assets`)) %>%
mutate(Change_Pct = Change/lag(`NetAssets`))
total_accts <- bal2 %>%
select(grep('Month|^bal|Savings', names(bal2))) %>%
group_by(Month) %>%
summarise_all(sum, na.rm = TRUE) %>%
mutate(`Net Assets` = bal_chk + bal_ira + bal_bro + bal_403b - bal_cr) %>%
mutate(Change = `Net Assets` - lag(`Net Assets`)) %>%
mutate(Change_Pct = Change/lag(`NetAssets`))
### Total of All Accounts
total_accts <- bal2 %>%
select(grep('Month|^bal|Savings', names(bal2))) %>%
group_by(Month) %>%
summarise_all(sum, na.rm = TRUE) %>%
mutate(`Net Assets` = bal_chk + bal_ira + bal_bro + bal_403b - bal_cr) %>%
mutate(Change = `Net Assets` - lag(`Net Assets`)) %>%
mutate(Change_Pct = Change/lag(`Net Assets`))
total_accts
216442-(-54225)
str(total_accts)
str(donations3)
str(donations2)
donations <- subset(exp.df, group == 'Donations')
donations2 <- donations[, !grepl('year|qua|month', names(donations))]
donations3 <- donations2[, grepl('date|subgroup|desc|place|price|tax|total', names(donations2))]
donations3$subgroup <- gsub('Non-tax deductible', 'Non-TD', donations3$subgroup)
donations3$subgroup <- gsub('Tax-deductible', 'TD', donations3$subgroup)
donations3[, c('item_desc', 'place')] %>%
map_df(~ gsub('*', '[REDACTED]', .x))
str(donations3)
